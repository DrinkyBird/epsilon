import subprocess
import argparse
import getpass
import platform
from datetime import datetime

class Hgver:
    def __init__(self):
        self.defines = {}

        parser = argparse.ArgumentParser(description="Tool to generate ACS file containing Git commit information")
        parser.add_argument("outfile", help="path to output acs file")
        self.args = parser.parse_args()

        self.add_define_parent('GIT_COMMIT', '%h')
        self.add_define_parent('GIT_COMMIT_LONG', '%H')
        self.add_define('GIT_REVISION', int(self.exec_cmd('git rev-list --count HEAD')))
        self.add_define('GIT_REVISION_STR', self.exec_cmd('git rev-list --count HEAD'))

        self.generate_header()

    def exec_cmd(self, cmd):
        p = subprocess.Popen(cmd, shell = True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        out = ''
        for line in p.stdout.readlines():
            out += line.decode("utf-8") + '\n'

        ret = p.wait()
        if ret != 0:
            print('Mercurial log returned with code %d' % (ret))

        while out.endswith('\n'):
            out = out[:-1]
        
        return out

    def git_log_cmd(self, format):
        return self.exec_cmd('git log -n 1 --pretty="format:' + format + '" HEAD')

    def add_define(self, key, value):
        self.defines[key.upper()] = value

    def add_define_parent(self, key, format):
        self.add_define(key, self.git_log_cmd(format))

    def add_define_parent_int(self, key, format):
        self.add_define(key, int(self.git_log_cmd(format)))

    def generate_header(self):
        filename = self.args.outfile

        text = ''
        text += "// This file was automatically generated by %s@%s at %s\n" % (getpass.getuser(), platform.node(), datetime.now().strftime("%A %d %B %Y %H:%M:%S"))

        # actual definitions
        for k in self.defines:
            v = self.defines[k]

            text += '#define '
            text += k + ' '

            if isinstance(v, str):
                text += '"' + v + '"'
            else:
                text += str(v)

            text += '\n'
        
        # write out
        handle = open(filename, "w")
        handle.write(text)
        handle.close()

if __name__ == "__main__":
	Hgver()