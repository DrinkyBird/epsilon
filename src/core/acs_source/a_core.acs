/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * All Out War 2 core mechanism scripts
 * Credit to VoltlocK for originally creating the engine
 * With modifications by the Omega Team
 *
 * You may use portions of this script in your project as long as you give
 * credit where credit is due. Please don't be lame and just copy-paste any
 * of this and call it your own. Thanks!
 */

// =============================================================================
// GAME INITIALIZATION
// Anything that needs to be done on the SERVER side right at game start should
// go here.
script SC_GAMEINIT OPEN {
	delay (1);
	
	// [Dusk] Network state
	NetState |= NETSTATE_Server;
	
	for (int i = 0; i <= 1; i++) {
		GotRefinery[i] = True;
		GotBarracks[i] = True;
		GotFactory[i] = True;
		GotPlant[i] = True;
		GotRepair[i] = True;
		GotObelisk[i] = True;
	}
	
	StartingTickets = GetCVAR ("epsilon_tickets");
	
	SetLineSpecial (159, ACS_Execute, 342);
	
	// Seems like the initial speeds for buildings are bogus. Correct them!
	SYNC_UpdateAllBuildings ();
	
	// For some reasons, the class and item arrays can get
	// bogus values. Attempt to fix them.
	FixFuckedUpArrays ();
	
	// Activate developer mode if the proper cvar is set.
	if (GetCVAR ("aow_developer")) {
		DeveloperSafetyLock = 0x7FFFFFFF;
		ACS_ExecuteAlways (SC_DEVELOPERMODE, 0);
	}
	
	// If we have ticket pool active, set the initial tickets now.
	if (TicketPool) {
		SetTickets (TEAM_Blue, GetCVAR ("epsilon_tickets"));
		SetTickets (TEAM_RED, GetCVAR ("epsilon_tickets"));
	}
	
	// Map markers
	SpawnSpotForced ("CrateMapMarker", TID_CRATE, 0, 0);
	SpawnSpotForced ("TiberiumMapMarker", TID_TIBERIUM, 0, 0);
	
	// [Dusk] It's possible that the war factory isn't present.
	if (ThingCount (0, TID_FACTORY_BLUE) * ThingCount (0, TID_FACTORY_RED) == 0) {
		SetMapFlags (MAPF_NoMechs);
		GotFactory[0] = false;
		GotFactory[1] = false;
		
		// [Dusk] Remove any WF terminals in the map
		Thing_Remove (TID_FACTORY_BLUE);
		Thing_Remove (TID_FACTORY_RED);
	}
	
	// Record initial building healths
	for (i = 0; i < MAX_BUILDINGS * 2; i++)
		RecordedBuildingHealths[i] = GetActorSpawnHealth (BaseTIDs[i]);
	
	// Build various data tables
	InitClasses();
	
	BuildMenuClasses ();
	BuildMenuResearches ();
	BuildMenuMechs ();
	InitParticleFuserData ();
	CR_InitCrateList ();
	
	// [Dusk] These maps are too small to have portals.
	// TODO: move this to map scripts
	switch (GetLevelInfo (LEVELINFO_LEVELNUM)) {
	case 2:
	case 3:
		UseTeleporterNodes = 0;
		break;
	}
	
	// Archive some server CVars here
	delay (35);
	ArchiveCVAR ("epsilon_credflow");
	ArchiveCVAR ("epsilon_startcredits");
	ArchiveCVAR ("epsilon_creditfrag");
	ArchiveCVAR ("epsilon_bonusamount");
	ArchiveCVAR ("epsilon_bonustime");
	ArchiveCVAR ("epsilon_medicbonusneed");
	ArchiveCVAR ("epsilon_repairbonus");
	ArchiveCVAR ("epsilon_juggernautlimit");
	ArchiveCVAR ("epsilon_ticketpool");
	ArchiveCVAR ("epsilon_teamstaytime");
	ArchiveCVAR ("epsilon_plasmapurchasedelay");
	ArchiveCVAR ("epsilon_maxcannonsperteam");
	ArchiveCVAR ("epsilon_plasmacooldown");
	ArchiveCVAR ("epsilon_nukepurchasedelay");
	ArchiveCVAR ("epsilon_maxtimecopsperteam");
	ArchiveCVAR ("epsilon_c4delay");
	ArchiveCVAR ("epsilon_suddendeathtime");
	ArchiveCVAR ("epsilon_degeneration");
	ArchiveCVAR ("epsilon_degenerationinterval");
	ArchiveCVAR ("epsilon_tournamentmode");
	ArchiveCVAR ("epsilon_disablemechs");
	ArchiveCVAR ("epsilon_surrendermode");
	ArchiveCVAR ("aow_buildingpoints");
	ArchiveCVAR ("epsilon_tiberium_self");
	ArchiveCVAR ("epsilon_tiberium_other");
	ArchiveCVAR ("epsilon_tiberium_advperc");
	ArchiveCVAR ("epsilon_creditcap");
	ArchiveCVAR ("epsilon_nomechs");
	ArchiveCVAR ("epsilon_noradar");
	ArchiveCVAR ("epsilon_noteamswitcher");
	ArchiveCVAR ("epsilon_nospawninvul");
	ArchiveCVAR ("epsilon_nodisconnectdonate");
	ArchiveCVAR ("epsilon_donatewait");
	ArchiveCVAR ("epsilon_nukecountdown");
	ArchiveCVAR ("epsilon_nukesurpreme");
	
	// If we're offline, set the game to multiplayer emulation
	// for more accurate netgame emulation.
	if (netstate == NETSTATE_Offline)
		ConsoleCommand ("netgame");
}

function void SetConfig (int key, str val) {
	int changed = (Config[key][PEER_SERVER] != val);
	Config[key][PEER_SERVER] = val;
	if (netstate == NETSTATE_Offline) {
		// Syncing is not done in offline mode. Furthermore, we're
		// both the "client" and the "server", so just set the values
		// here.
		Config[key][PEER_CLIENT] = Config[key][PEER_SERVER];
	} else if (changed) {
		// Log (s:name, s:" is now ", d:val);
		
		// The value changed, inform clients about it!
		SYNC_UpdateConfig (key);
	}
}

// Server settings
script SC_SERVERSETTINGS OPEN {
	// ==================================
	// DMFLAGS
	if (!GetCVAR ("sv_weapondrop"))
		ConsoleCommand ("sv_weapondrop 1");
	
	if (!GetCVAR ("sv_itemrespawn"))
		ConsoleCommand ("sv_itemrespawn 1");
	
	if (!GetCVAR ("compat_limited_airmovement"))
		ConsoleCommand ("compat_limited_airmovement 1");
	
	// [Dusk] Enforce no pointlimit until game is considered over. However, the pointlimit
	// is also used to end the game when needed.
	if (!gameover && GetCVAR ("pointlimit") != 0)
		ConsoleCommand ("pointlimit 0");
	
	// [Dusk] Weapon stay must be disabled to prevent infinite weapons
	if (GetCVAR ("sv_weaponstay"))
		ConsoleCommand ("sv_weaponstay 0");
	
	// ==================================
	// CUSTOM CVARS
	// w/ sanity checks
	if (!GetCVAR ("epsilon_credflow")) SetCVAR("epsilon_credflow", 4);
	if (GetCVAR ("epsilon_startcredits") <= 0) SetCVAR("epsilon_startcredits", 300);
	if (GetCVAR ("epsilon_creditfrag") <= 0) SetCVAR("epsilon_creditfrag", 50);
	if (GetCVAR ("epsilon_bonusamount") <= 0) SetCVAR("epsilon_bonusamount", 300);
	if (GetCVAR ("epsilon_bonustime") <= 0) SetCVAR("epsilon_bonustime", 5);
	if (GetCVAR ("epsilon_medicbonusneed") <= 0) SetCVAR("epsilon_medicbonusneed", 175);
	if (GetCVAR ("epsilon_repairbonus") <= 0) SetCVAR("epsilon_repairbonus", 1);	
	if (GetCVAR ("epsilon_juggernautlimit") <= 0) SetCVAR("epsilon_juggernautlimit", 2);
	if (GetCVAR ("epsilon_ticketpool") <= 0) SetCVAR("epsilon_ticketpool", false);
	//[SP]How long you can stay on a team before you are never switched.
	if (GetCVAR ("epsilon_teamstaytime") <= 0)  SetCVAR("epsilon_teamstaytime", 15);
	
	if (GetCVAR ("epsilon_tickets") <= 0) SetCVAR("epsilon_tickets", 75);
	
	// Plasma Cannon initial delay
	if (!GetCVAR ("epsilon_plasmapurchasedelay")) SetCVAR("epsilon_plasmapurchasedelay", 5);
	//[SP]Maximum number of plasma cannons per team. (Set to -1 for unlimited)
	if (!GetCVAR ("epsilon_maxcannonsperteam")) SetCVAR("epsilon_maxcannonsperteam", 4);
	// [Dusk] Time (in minutes) to determine plasma cannon cooldown. Use -1 to disable
	if (!GetCVAR ("epsilon_plasmacooldown")) SetCVAR("epsilon_plasmacooldown", 3);
	
	//[SP]How long you have to wait to buy a new superweapon beacon. (Minutes) (Set to -1 to disable wait)
	if (!GetCVAR ("epsilon_nukepurchasedelay")) SetCVAR("epsilon_nukepurchasedelay", 5);
	
	// [SP]Maximum number of time cops per team. (Set to -1 for unlimited)
	if (!GetCVAR ("epsilon_maxtimecopsperteam")) SetCVAR("epsilon_maxtimecopsperteam", 1);
	
	// [Dusk] How many minutes until +1 Timed C4 can be purchased. (-1 to disable)
	if (!GetCVAR ("epsilon_c4delay")) SetCVAR("epsilon_c4delay", 5);
	
	//[SP] Time (in minutes) before sudden death.
	// [Dusk] changed default to 45, -1 means immediate
	if (GetCVAR ("epsilon_suddendeathtime") == 0)
		SetCVAR("epsilon_suddendeathtime", 45);
	
	// [Dusk] Sudden death degeneration
	if (GetCVAR ("epsilon_degeneration") <= 0)
		SetCVAR("epsilon_degeneration", 0);
	if (GetCVAR ("epsilon_degenerationinterval") <= 0)
		SetCVAR("epsilon_degenerationinterval", 10);
	
	if (GetCVAR ("epsilon_surrendermode") <= 0)
        SetCVAR("epsilon_surrendermode", 0);
	
	// [Dusk] Tiberium amounts
	if (!GetCVAR ("epsilon_tiberium_self"))
		SetCVAR("epsilon_tiberium_self", 225);
	if (!GetCVAR ("epsilon_tiberium_other"))
		SetCVAR("epsilon_tiberium_other", 75);
	if (!GetCVAR ("epsilon_tiberium_advperc"))
		SetCVAR("epsilon_tiberium_advperc", 300);
	
	// [Dusk] {9/6/12} Maximum amount of credits a player can possess.
	//     0 = infinite (well, as infinite as integers go..)
	// [Dusk] {1/16/13} Cap at 30k because of networking issues. The HUD
	// overflows otherwise. If this cap is to be increased, the networking
	// will have to be increased to something.. hackier.
	if (GetCVAR ("epsilon_creditcap") == 0 || GetCVAR ("epsilon_creditcap") > 30000)
        SetCVAR("epsilon_creditcap", 30000);
	
	// [Dusk] {11/19/12} How many seconds must the player be in game until they can donate?
	if (GetCVAR ("epsilon_donatewait") == 0)
        SetCVAR("epsilon_donatewait", 0);
	
	// [Dusk] {1/16/13} How many seconds does a beacon take to detonate?
	if (GetCVAR ("epsilon_nukecountdown") <= 0)
        SetCVAR("epsilon_nukecountdown", 6);
	
	// TODO: get rid of these variables and replace with direct GetCVAR calls
	CreditFragAward = GetCVAR("epsilon_creditfrag");
	CreditAwardTime = GetCVAR("epsilon_bonustime");
	CreditAwardAmount = GetCVAR("epsilon_bonusamount");
	CreditRepairAmount = GetCVAR("epsilon_repairbonus");
	TicketPool = GetCVAR("epsilon_ticketpool");
	TournamentMode = GetCVAR("epsilon_tournamentmode");
	BeaconPurchaseDelay = GetCVAR("epsilon_nukepurchasedelay") * 60;
	PlasmaCooldownTime = GetCVAR("epsilon_plasmacooldown") * MINUTETICS;
	MedicBonusNeed = GetCVAR ("epsilon_medicbonusneed");
	
	// ======================================================================
	// [Dusk] Synchronized configurations!
	SetConfig (CONFIG_ALTEXP, GetCVAR ("epsilon_altexp"));
	SetConfig (CONFIG_STARTTICKETS, GetCVAR ("epsilon_tickets"));
	SetConfig (CONFIG_MECHS, (!CheckMapFlags (MAPF_NOMECHS) && !GetCVAR ("epsilon_nomechs")));
	SetConfig (CONFIG_TOURNAMENTMODE, TournamentMode);
	SetConfig (CONFIG_MAXTIMECOPS, GetCVAR ("epsilon_maxtimecopsperteam"));
	SetConfig (CONFIG_JUGGERNAUTLIMIT, GetCVAR ("epsilon_juggernautlimit"));
	SetConfig (CONFIG_C4DELAY, GetCVAR ("epsilon_c4delay"));
	SetConfig (CONFIG_NORADAR, GetCVAR ("epsilon_noradar"));
	SetConfig (CONFIG_CREDITCAP, GetCVAR ("epsilon_creditcap"));
	
	// [Dusk] {9/6/12} Are these needed in this function? They're updated upon research anyway.
	SetConfig (CONFIG_ADVTURRETS_BLUE, AdvancedTurrets[TEAM_BLUE]);
	SetConfig (CONFIG_ADVTURRETS_RED, AdvancedTurrets[TEAM_RED]);
	SetConfig (CONFIG_MAXTURRETS_BLUE, MaxTurrets[TEAM_BLUE]);
	SetConfig (CONFIG_MAXTURRETS_RED, MaxTurrets[TEAM_RED]);
	
	delay (35);
	restart;
}

//Setting Player scripts
script SC_PLAYERRESPAWN RESPAWN {
	if (StartTime[PlayerNumber()] == 0)
		InitPlayer();
	
	GiveInventory("IsInSpawnRoom", 1);
	if(PlayerTeam() == TEAM_BLUE)
		GiveInventory ("IsBlue",1);
	else if(PlayerTeam() == TEAM_RED)
		GiveInventory ("IsRed",1);
	
	Thing_ChangeTID (0, PlayerNumber()+3800);
	
	if(GetPlayerInfo(PlayerNumber(),PLAYERINFO_GENDER) == 1) {
		SetActorProperty(0,APROP_DeathSound,"female/death");
		GiveInventory("IsFemale",1);
	}
	
	ACS_ExecuteAlways (97, 0);
	
	if (!CheckWeapon ("Unarmed"))
		SetWeapon ("Unarmed");
	
	GiveInventory ("Credit", Credits[PlayerNumber()]);
	GiveInventory ("Experience", Experience[PlayerNumber()]);
	
	SetInventory ("IsAdmin", IsAdmin[PlayerNumber()]);
}

script SC_CL_Respawn RESPAWN CLIENTSIDE {
	// [Dusk] Mark down if we respawned
	if (PlayerNumber() == consoleplayer)
		consoledead = false;
}

script SC_PLAYERENTER ENTER {
	InitPlayer ();
	
	ACS_ExecuteAlways (SC_PLAYERRESPAWN, 0);
	
	// [Dusk] Check team balance now as the player's
	// entrance may have caused surplus in team counts.
	// We need an one-tic delay first, however.
	delay (1);
	CheckTeamBalance ();
}

Script SC_PLAYERDISCONNECT (int gone) DISCONNECT {
	// [Dusk] {11/2/12} Donate all credits to teammates. This
	// has to be done before the block below which resets credits!
	if (!GetCVar ("epsilon_nodisconnectdonate")) {
		int team = PlayersTeam[gone];
		int teammates = GetTeamProperty (team, TPROP_NumPlayers);
		if (teammates > 0) {
			int cred = Credits[gone];
			int share = cred / teammates;
			int donater = PlayerNumber();
			for (int i = 0; i < MAXPLAYERS; i++) {
				if (!PlayerInGame (i) || GetPlayerTeam (i) != team)
					continue;
				
				GivePlayerCredits (i, share);
			}
		}
	}
	
	IsAdmin[gone] = false;
	SetPlayerCredits (gone, 0);
	Experience[gone] = 0;
	Surrender[gone] = 0;
	PlasmaCooldown[gone] = 0;
	StartTime[gone] = 0;
	
	Thing_ChangeTID (3800 + gone, 0);
	
	// [Dusk] There is no longer anybody sitting in the team's hanger.
	if (MechGetter[PlayersTeam[gone]] == gone && GettingMech[PlayersTeam[gone]])
		GettingMech[PlayersTeam[gone]] = false;
	
	if (Surrender[Gone]) {
		Surrender[Gone] = false;
		if (PlayersTeam[Gone] == TEAM_RED) {
			IntelMessage (strparam (s:"\cD", d:SurrenderCount (TEAM_RED), s:"\cQ/\cD", d:RedCount(), s:" ",
				s:"\cJof \cARed Team\cJ\n have voted to surrender"), true);
		} else if (PlayersTeam[Gone] == TEAM_BLUE) {
			IntelMessage (strparam (s:"\cD", d:SurrenderCount (TEAM_BLUE), s:"\cQ/\cD", d:BlueCount(), s:" ",
				s:"\cJof \cNBlue Team\cJ\n have voted to surrender"), true);
		}
	}
	else // % of players surrendering could now be higher. Al demands a recount!
		ACS_Execute(751, 0);
	
	// [Dusk] Check team balance now, this disconnect may
	// have unbalanced them.
	CheckTeamBalance ();
}

// =============================================================================
// Client-side end
script SC_CL_PLAYERENTER ENTER CLIENTSIDE {
	if (PlayerNumber() != consoleplayer)
		terminate;
	
	// START UP MESSAGES
	int y = 0.3;
    
    LogBar1();
	
	SetFont ("BIGFONT");
	HudMessageAndLogFadeInOut(StrParam(s:"Welcome to \cFAll Out War 2!"),
		HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 0, CR_WHITE, 0.5, y, 7.0, 0.5, 1.0);
	y += 0.10;
	
	SetHUDFont ();
	
	HudMessageAndLogFadeInOut (StrParam(s:"You are playing \cFThe Epsilon Project\cJ ", s:VersionString ()),
		HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 1, CR_WHITE, 0.5, y, 7.0, 0.5, 1.0);
	y += SMALLSPACE;
	
	HudMessageAndLogFadeInOut (StrParam(s:"Join the \cNFirestick Games\cj Discord server at \cFhttps://firestick.games\cJ to discuss Epsilon!"),
		HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 2, CR_WHITE, 0.5, y, 7.0, 0.5, 1.0);
	y += SMALLSPACE;
	
	HudMessageAndLogFadeInOut (StrParam(s:"\nSee \cFOptions \cN-> \cFCustomise Controls\c- for keybinds!\n"),
		HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 3, CR_WHITE, 0.5, y, 7.0, 0.5, 1.0);
	y += SMALLSPACE;
	
	if (GetConfig (CONFIG_ALTEXP)) {
		HudMessageAndLogFadeInOut (StrParam(s:"This server uses alternate experience mode.\n",
			s:"Rank needs are down to a third",
			s:"\cGbut you lose it all when you die!"),
			HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 4, CR_GOLD, -0.25, 0.6, 12.0, 0.5, 1.0);
		y += 0.25;
	}
	
	if (VERSION_MINOR > 50) {
        y += SMALLSPACE * 2; // Weird positioning bug
		// This is running a beta version
		HudMessageAndLogFadeInOut (StrParam(s:"This is a beta release, bear in mind that\n",
			s:"everything might not be working properly!"),
			HUDMSG_FADEINOUT|HUDMSG_LOG, HU_CLIENTWELCOME + 5, CR_GOLD, 0.5, y, 7.0, 0.5, 1.0);
		y += 0.25;
	}
    
    LogBar3();
	
	delay (20);
	
    LocalAmbientSound ("voltlock/welcome", 127);
	
	// =========================================================================
	// [Dusk] We joined the game - refresh the HUD
	if (PlayerNumber () == consoleplayer) {
		DisplayStatusHUD ();
		// DrawTeamLogHeader ();
	}
}

// [Dusk] Dummy script, maps call this :/
script 92 (void) {}

// [Dusk]
script SC_CL_PLAYERDISCONNECT (int gone) DISCONNECT CLIENTSIDE {
	// If we DISCONNECTed, yet this script executed,
	// we became a spectator.
	if (gone == ConsolePlayer) {
		// We're no longer dead
		consoledead = false;
		
		// Refresh the HUD to clear out the credits/exp display.
		DisplayStatusHUD ();
		
		// Also clear the menu
		ClearMenu ();
		
		// HACK: For some reason disconnecting causes OPEN CLIENTSIDE scripts
		// to be terminated. Get around this by re-executing affected scripts.
		delay (1);
		ACS_Execute (SC_HUDDaemon, 0);
	}
}

function void InitPlayer (void) {
	SetCredits (GetCVAR ("epsilon_startcredits"));
	Experience[PlayerNumber()] = 0;
	Surrender[PlayerNumber()] = False;
	PlayersTeam[PlayerNumber()] = PlayerTeam();
	StartTime[PlayerNumber()] = Timer();
	HasTeleported[PlayerNumber()] = false;
	RepairBonus[PlayerNumber()] = 0;
	MedicBonus[PlayerNumber()] = 0;
	UnawardedDamage[PlayerNumber ()] = 0;
	MechPurchaseCooldown[PlayerNumber()] = 0;
	
	// [Dusk] If we're in developer mode, make him gamemaster.
	if (Developer) {
		IsAdmin[PlayerNumber()] = true;
		
		SetFont ("BIGFONT");
		HudMessage(s:"This game is in developer mode. You have gamemaster access.";
			HUDMSG_FADEINOUT, 0, CR_BLUE, 0.5, 0.2, 7.0, 0.5, 1.0);
	}
}

// =============================================================================
// [Dusk] This script checks for the game-over condition and ends the game if so.
script SC_GameOver (int team, int small) {
	SetActivator (-1);
	
	if (CalcBaseLeft (!team))
		terminate;
	
	// No buildings left standing, thus the game is over.
	gameover = true;
	Delay (1);
	
	// Give the end-of-game points to the winning team.
	// This ensures that the correct team actually wins.
	int winpoints = GetTeamProperty (!team, TPROP_PointCount) - GetTeamProperty (team, TPROP_PointCount);
	if (winpoints < 0) // Don't let it be negative.
		winpoints = 0;
	
	winpoints += 5;
	
	// Set the pointlimit accordingly. `pointlimit 1` works for now but
	// it could be seen as a bug (there's actually a ticket on the tracker
	// about this at the time of this writing) so I'm dynamically setting the
	// points so that the winning team has just about enough score to reach it.
	int pointlimit = GetTeamProperty (team, TPROP_PointCount) + winpoints;
	ConsoleCommand (strparam (s:"pointlimit ", d:pointlimit));
	
	// Give the final points to the winning team. This line ends the game.
	Team_GivePoints (team, winpoints, false);
}
