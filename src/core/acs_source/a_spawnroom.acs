// REFILL
function void GiveFullRefill (int silent) {
	// [Dusk] ... heh. I guess this should be replaced already?
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);	GiveInventory("Backpack",1);
	
	// Restore medication fields
	if (CheckInventory ("MedicationFieldCount") > 0)
		SetInventory ("MedicationFieldItem", CheckInventory ("MedicationFieldCount"));
	
	// Refill all C4
	RefillC4 ();
	
	// Jetpack fuel
	if (CheckInventory ("Jetpack"))
		GiveInventory ("JetpackFuel", 10000);
	
	// Reset health unless in a mech
	if (!CheckInventory ("IsMech") && GetHealth() < GetSpawnHealth())
		SetHealth (GetSpawnHealth ());
	
	// Self-heal
	GiveInventory ("SelfHealItem", 1);
	
	if (!silent) {
		SetFont ("BIGFONT");
		HudMessage(s:"Refilled!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_YELLOW, 0.5, 0.45, 2.0, 1.0);
		ActivatorSound("misc/ammo_pkup",255);
	}
}

// TELEPORT BACK TO FIELD
script 94 (int Team) {
	if (!CheckInventory("HasClass")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage(s:"You can't leave without choosing a class!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_RED, 0.5, 0.45, 2.0, 1.0);
		terminate;
	}
	
	ACS_ExecuteAlways (SC_DOTELEPORTTOFIELD, 0, Team);
}

// RESIGN
script 95 (int unused, int rflags) {
	if (MitigateDoublePress() && !(rflags & RF_FORCE))
		terminate;
	
	if (!CheckInventory("HasClass") && !(rflags & RF_FORCE)) {
		MenuResponse (MSGTYPE_ERROR, "You don't have a class to resign from!");
		terminate;
	}
	
	ACS_ExecuteAlways (SC_STEALTH, 0, 3);
	delay (5);
	SetWeapon ("Unarmed");
	TakeInventory ("HasClass",1);
	delay (10);
	
	SetClass (CLASS_None, 0);
}

// PURCHASE TERMINAL / RESEARCH TERMINAL / MECH PURCHASE TERMINAL
script 96 (int type) {
	if (MitigateDoublePress())
		terminate;
	
	int dest;
	
	if (PlayerTeam() == type%2) {
		GenericError ("This is not your terminal!");
		terminate;
	}
	
	if (CheckInventory ("IsMech")) {
		GenericError ("You can't use that in a mech!");
		terminate;
	}
	
	if (type <= 1) {
		// PURCHASE TERMINAL
		dest = 70 + !type;
		GiveInventory ("IsInSpawnRoom", 1);
		
		if (!Teleport (dest)) {
			SpawnSpotForced ("AntiUtilityExplosion", dest, 0, 0);
			delay (10);
			Teleport (dest);
		}
		
		// [Dusk] Refill him now.
		GiveFullRefill (false);
	} else if (type <= 3) {
		// FACTORY TERMINAL
		if (!GetConfig (CONFIG_MECHS)) {
			GenericError ("Mechs have been disabled!");
			terminate;
		}
		
		if (!CheckFactory (PlayerTeam ()))
			terminate;
		
		if (CheckInventory ("PowerBerserk")) {
			GenericError ("You can't pilot a mech while berserk!\nYou'll just tear the thing into pieces.");
			terminate;
		}
		
		if (CheckInventory ("CantMech")) {
			GenericError ("You have upgraded yourself in a\nway where you must resign!");
			terminate;
		}
		
		ActivateMenu (MENU_FACTORY);
	} else if (type <= 5) {
		// RESEARCH TERMINAL
		if (!CheckPlant (PlayerTeam ()))
			terminate;
		
		ActivateMenu (MENU_RESEARCH);
	}
}

script 90 (void) {
	TakeInventory ("PurchaseToken", 1);
}

// Teleport the player to base.
script SC_DOTELEPORTTOFIELD (int team) {
	int i;
	bool failed = true;
	
	// [Dusk] Try to teleport 10 times. This way, if one teleport destination is blocked,
	// we'll still be able to teleport onto another.
	if (GetLevelInfo (LEVELINFO_LEVELNUM) == 20 || GetLevelInfo (LEVELINFO_LEVELNUM) == 21) {
		// Renegade levels need NoStop. Maybe there could be a cleaner way to do this?
		for (i = 0; i < 10; i++) {
			if (Teleport_NoStop (1+(1-team), 0)) {
				failed = false;
				break;
			}
		}
	} else {
		for (i = 0; i < 10; i++) {
			if (Teleport (1+(1-team))) {
				failed = false;
				break;
			}
		}
	}
	
	if (failed) {
		GiveInventory ("IsInSpawnRoom", 1);
		IntelMessage ("In-field teleportation \cAfailed\cJ", false);
	}
	else
		TakeInventory ("IsInSpawnRoom", 1);
}