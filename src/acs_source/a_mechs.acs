// All Out War 2 Mech scripts
// Credit to VoltlocK for originally creating the engine
// With modifications by the Omega Team

// You may use portions of this script in your project as long as you give credit where credit is
// due. Please don't be lame and just copy-paste any of this and call it your own. Thanks!

// =============================================================================
// [Dusk] These functions stash and restore the armor values. PushArmor should be used
// when a player goes into a mech, PopArmor should be used when the player ejects.
function void PushArmor (void) {
	SetInventory ("StoredArmorGrade", GetArmorGrade ());
	SetInventory ("StoredArmorModifier", GetArmorModifier ());
	SetArmorGrade (0, ARMOD_NONE);
	
	// Special check for armor upgrade. SetArmorGrade here
	// will leave it to the player, and in PushArmor will
	// give the player extra. catering for both:
	if (CheckInventory ("HasArmorUpgrade")) {
		CheckAndRemove ("PowerGrade1Armor");
		TakeInventory ("StoredArmorGrade", 1);
	}
}

// =============================================================================
function void PopArmor (void) {
	SetArmorGrade (CheckInventory ("StoredArmorGrade"), CheckInventory ("StoredArmorModifier"));
	SetInventory ("StoredArmorModifier", 0);
	SetInventory ("StoredArmorGrade", 0);
}

// =============================================================================
function str WF_PurchaseMech (int mech) {
	return ACS_ExecuteWithResult (SC_MECHMORPH, mech);
}

// =============================================================================
function str WF_CheckAvailability (int mech) {
	if (!GetConfig (CONFIG_MECHS))
		return "Mechs are disabled!";
	
	if (!CheckBuilding (BUILDING_FACTORY, PlayerTeam()))
		return "Your war factory has been destroyed!";
	
	if (mech == MECH_JUGGERNAUT &&
		TeamInvCount ("JuggernautWeapons", PlayerTeam ()) >= GetConfig (CONFIG_JUGGERNAUTLIMIT))
			return "Juggernauts at limit!";
	
	if (Mechs[mech][MK_FLAGS] & MF_POWER && !GetConfig (CONFIG_ADVMECHS_BLUE + PlayerTeam()))
		return "You need advanced mechs researched to purchase this!";
	
	if (!CanAfford (Mechs[mech][MK_COST]))
		return "You need more credits!";
	
	return 0;
}

// =============================================================================
// [Dusk] Mech morph script. Result value is 0 if success,
// a script table index containing error message if failure
script SC_MECHMORPH (int mech) {
	str mechname = Mechs[mech][MK_NAME];
	int dest = 108;
	int mapspot = 6000;
	int door = 10;
	if (PlayerTeam() == TEAM_RED) {
		dest = 208;
		mapspot = 6001;
		door = 12;
	}
	
	// [Dusk] Check if a constraint prevents us from getting a mech.
	str e = WF_CheckAvailability (mech);
	if (e != 0) {
		SetResultValue (e);
		terminate;
	}
	
	if (GettingMech[PlayerTeam ()]) {
		SetResultValue ("Please wait for another mech to leave the hanger");
		terminate;
	}
	
	// Attempt to teleport the player into the hanger
	if (!Teleport(dest)) {
		// [Dusk] If we can't, try clear it of crap and try again.
		SpawnSpotForced ("AntiUtilityExplosionLarge", dest, 0, 0);
		
		// [Dusk] If we STILL can't teleport, there isn't much we can do.
		if (!Teleport (dest))
			SetResultValue ("Cannot teleport into the hanger!");
	}
	
	// At this point, we should be good.
	SetResultValue (0);
	
	SetActorProperty (0, APROP_SPEED, 1.0);
	delay (1);
	
	CallEvent (ACTION_MechPurchase, mech);
	
	// If the player had the jetpack active while getting the mech, we need to
	// deactivate it now.
	if (CheckInventory ("JetpackActive"))
		GiveInventory ("JumpjetDeactivate", 1);
	
	// If the player is still in a menu, get him out of it.
	SetInventory ("InMenu", 0);
	
	// Morph the player into the mech now.
	GiveInventory ("IsMech", 1);
	GiveInventory (Mechs[mech][MK_MORPH], 1);
	GiveInventory (Mechs[mech][MK_AMMO], 1);
	
	SetThingSpecial (0, ACS_ExecuteAlways, 317, 0, PlayerTeam());
	
	SpendCredits (Mechs[mech][MK_COST]);
	DisplayTick();
	SetFont ("BIGFONT");
	HudMessage(s:"You are now a \cF", s:mechname, s:"!";
		HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_WHITE, 0.5, 0.45, 2.0, 1.0);
	
	// extra notes
	if (mech == MECH_JUGGERNAUT)
		HudMessage(s:"Upon ejecting, the suit \ckself-destructs.";
			HUDMSG_FADEOUT, 1860+PlayerNumber(), CR_WHITE, 0.45, 0.5, 2.0, 1.0);
	
	MechGetter[PlayerTeam()] = PlayerNumber();
	
	// Alert for power mechs
	if (Mechs[mech][MK_FLAGS] & MF_POWER) {
		SetFont ("SMALLFONT");
		IntelMessage (strparam (s:"\cGWarning: ", s:TeamColors[PlayerTeam() + 2], s:TeamNames[PlayerTeam()],
			s:"\cJ ", s:mechname, s:" in-field!"), true);
	}
	
	// [Dusk] Tell teammates of the purchase
	TeamMessage (TMSG_MECHPURCHASE, mech, 0);
	
	// [Dusk] Fire up the tortoise HUD
	if (mech == MECH_Tortoise)
		ACS_Execute (SC_CL_TortoiseHUD, 0);
	
	Log (n:0, s:" pilots ", s:mechname, s:".");
	
	// [Dusk] Freeze the player and wait for door to close if it's still open.
	SetPlayerProperty (0, 1, PROP_TOTALLYFROZEN);
	GettingMech[PlayerTeam()] = true;
	TagWait (door);
	
	// [Dusk] Lagging clients don't seem to have their angle changed properly
	// online, brute-force it with several changes.
	for (int i = 0; i < 3; i++) {
		SetActorAngle (0, GetActorAngle (dest));
		delay (18);
	}
	delay (18);
	
	// Open the door.
	Door_Open (door, 64);
	TagWait (door);
	
	// [NG] This will thrust the player out of the hanger.
	ThrustThing (GetActorAngle (dest) >> 8, 35, 1, 0);
	delay (35);
	
	// Set the mech free
	SetPlayerProperty (0, 0, PROP_FROZEN);
	SetPlayerProperty (0, 0, PROP_TOTALLYFROZEN);
	ActivatorSound ("mech/start", 127);
	
	// [Dusk] Store the armor values into inventory and take it from the actual
	// mech, this way the mech is unaffected by armor but the armor can also be
	// given back if and when the player ejects.
	PushArmor ();
	
	SetFont ("BIGFONT");
	if (mech == MECH_JUGGERNAUT)
		HudMessage (s:"Powersuit online!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	else if (mech == MECH_ORCA)
		HudMessage (s:"Gunship online!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	else
		HudMessage (s:"Mech online!";
			HUDMSG_FADEOUT, 1800+PlayerNumber(), CR_GREEN, 0.5, 0.45, 2.0, 1.0);
	
	// Init the HUD.
	ACS_ExecuteAlways (315, 0);
	
	int tid = 6000;
	if (PlayerTeam() == TEAM_BLUE)
		tid = 6001;
	
	// [Dusk] Close the hanger door. However, it has to be cleared out of crap
	// if there is any, otherwise the door will not be able to close properly.
	int x0 = GetActorX (tid);
	int y0 = GetActorY (tid);
	int z = GetActorZ (tid);
	int d = 64.0; // Distance between center tid and "leaf" spots
	int angle = GetActorAngle (tid);
	
	// Calculate coords for anti-utility clearers
	int x1, x2, y1, y2;
	x1 = x0 + FixedMul (sin (angle + 0.5), d);
	y1 = y0 + FixedMul (cos (angle + 0.5), d);
	x2 = x0 + FixedMul (sin (angle + 0.0), d);
	y2 = y0 + FixedMul (cos (angle + 0.0), d);
	
	Spawn ("AntiUtilityExplosion", x0, y0, z);
	Spawn ("AntiUtilityExplosion", x1, y1, z);
	Spawn ("AntiUtilityExplosion", x2, y2, z);
	
	// Crap is cleared, close the door now
	Door_Close (door, 64);
	
	TagWait(door);
	GettingMech[PlayerTeam()] = false;
}

// =============================================================================
// Frag bounty
script 317 (int team) {
	if (team == PlayerTeam())
		terminate;
	AwardCredits (200);
	AddExperience (150);
}

// =============================================================================
// Mech Weapon Switching
script 314 (void) {
	if (!CheckInventory ("IsMech")) terminate;
	if (CheckInventory ("WolverineWeapons")) {
		if(CheckInventory("Wolverine-WhatWeapon") == 0)
		{
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfPulse Cannon"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/pulse",128);
		} else if(CheckInventory("Wolverine-WhatWeapon") == 1) {
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfFlak Minigun"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/minigun",128);
		} else {
			TakeInventory("Wolverine-WhatWeapon",3);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfLRM-10"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/lrm",128);
		}
	}
	
	if (CheckInventory ("TitanWeapons")) {
		if(CheckInventory("Wolverine-WhatWeapon") == 0)
		{
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfDual Flamethrowers"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/flamer",128);
		}
		else if(CheckInventory("Wolverine-WhatWeapon") == 1)
		{
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfLRM-20"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/lrm",128);
		}
		else //if(CheckInventory("Wolverine-WhatWeapon") == 2)
		{
			TakeInventory("Wolverine-WhatWeapon",3);
			SetFont("DOOMFONT");
			HudMessage(s:"\cf100mm Cannon"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/80mm",128);
		}
	}
	
	if (CheckInventory ("MadCatWeapons")) {
		if(CheckInventory("Wolverine-WhatWeapon") == 0)
		{
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfDual Shock Autorifles"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);
			ActivatorSound("switch/minigun",128);
		}
		else if(CheckInventory("Wolverine-WhatWeapon") == 1)
		{
			GiveInventory("Wolverine-WhatWeapon",1);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfLRM-20"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);
			ActivatorSound("switch/lrm",128);
		}
		else {
			TakeInventory("Wolverine-WhatWeapon",3);
			SetFont("DOOMFONT");
			HudMessage(s:"\cfDual Shock Cannon"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);
			ActivatorSound("switch/pulse",128);
		}
	}
	
	if (CheckInventory ("JuggernautWeapons")) {
		SetFont ("SMALLFONT");
		if (!CheckInventory("Wolverine-WhatWeapon")) {
			GiveInventory("Wolverine-WhatWeapon",1);
			HudMessage(s:"\cfSRM-15"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);
			ActivatorSound("switch/lrm",128);
		} else if (CheckInventory("Wolverine-WhatWeapon") == 1) {
			GiveInventory ("Wolverine-WhatWeapon", 1);
			HudMessage(s:"\cfFlak Minigun"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/minigun",128);
		} else if (CheckInventory("Wolverine-WhatWeapon") == 2) {
			GiveInventory("Wolverine-WhatWeapon", 1);
			if (PlayerTeam() == TEAM_RED)
				HudMessage(s:"\cfMini-nuke artillery"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			else
				HudMessage(s:"\cfIon-bomb artillery"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);		
			ActivatorSound("switch/80mm",128);
		} else {
			TakeInventory("Wolverine-WhatWeapon", 3);
			HudMessage(s:"Twin Mass Drivers"; HUDMSG_FADEOUT, 0, CR_Gold, 0.5, 0.8, 1.0, 0.5);
			ActivatorSound("switch/lrm",128);
		}
	}
}

//Mech HUD
script 315 (void) NET CLIENTSIDE {
	if (!CheckInventory ("IsMech"))
		terminate;
	
	SetHUDFont ();
	
	// Wolverine
	if (CheckWeapon("WolverineWeapons")) {
		HudMessage(s:MechHudColor(0, "Reload-LRM"), s:"LRM-10:\n",
			s:MechHudColor(1, ""), s:"PULSE:\n",
			s:MechHudColor(2, ""), s:"FLAK: ";
			HUDMSG_PLAIN, 0, CR_Gold, 0.8, 0.7, 0.2);
		
		HudMessage(d:CheckInventory("MechRocketAmmo"),
			s:"\n-\n",d:CheckInventory("Wolverine-MinigunAmmo");
			HUDMSG_PLAIN, 0, CR_White, 0.85, 0.7, 0.2);
		delay(2);
		restart;
	} else if (CheckWeapon ("MadCatWeapons")) {
		HudMessage(s:MechHudColor(0, "Reload-ShockCannon"), s:"SHOCK CANNON:\n",
			s:MechHudColor(1, ""), s:"SHOCK RIFLE:\n",
			s:MechHudColor(2, "Reload-LRM"), s:"LRM-20:\n";
			HUDMSG_PLAIN, 0, CR_Gold, 0.8, 0.7, 0.2);
		HudMessage(s:"-",
			s:"\n",d:CheckInventory("GeneporiumCharge"),
			s:"\n",d:CheckInventory("MechRocketAmmo");
			HUDMSG_PLAIN, 0, CR_White, 0.85, 0.7, 0.2);
		delay(2);
		restart;
	} else if (CheckWeapon("TitanWeapons")) {
		HudMessage(s:MechHudColor(0, "Reload-80mm"), s:"100MM:\n",
			s:MechHudColor(1, ""), s:"FLAMER:\n",
			s:MechHudColor(2, "Reload-LRM"), s:"LRM-20: ";
			HUDMSG_PLAIN, 0, CR_Gold, 0.8, 0.7, 0.2);
		HudMessage(d:CheckInventory("Titan-80mmAmmo"),
			s:"\n",d:CheckInventory("Titan-FlamerAmmo"),
			s:"\n",d:CheckInventory("MechRocketAmmo");
			HUDMSG_PLAIN, 0, CR_White, 0.85, 0.7, 0.2);
		delay(2);
		restart;
	} else if (CheckWeapon ("JuggernautWeapons")) {
		// [Dusk] Blue nuke is the ion bomb
		str nukename = "NUKE";
		if (PlayerTeam() == TEAM_BLUE)
			nukename = "ION BOMB";
		
		HudMessage(s:MechHudColor(0, "Reload-80mm"), s:"80MM:\n",
			s:MechHudColor(1, "Reload-LRM"), s:"SRM-15:\n",
			s:MechHudColor(2, ""), s:"FLAK:\n",
			s:MechHudColor(3, "Reload-Nuke"), s:nukename, s:":";
			HUDMSG_PLAIN, 0, CR_Gold, 0.8, 0.7, 0.2);
		HudMessage(d:CheckInventory("ArtilleryShellAmmo"),
			s:"\n", d:CheckInventory("ShortRangeMissileAmmo"),
			s:"\n", d:CheckInventory("MachineGunAmmo"),
			s:"\n", d:CheckInventory("NukeAmmo");
			HUDMSG_PLAIN, 0, CR_White, 0.85, 0.7, 0.2);
		delay(2);
		restart;
	}
}

function str MechHudColor (int weapon, str cooldownitem) {
	if (CheckInventory(cooldownitem)) {
		if (CheckInventory("Wolverine-WhatWeapon") == weapon)
			return "\cA";
		return "\cG";
	} else {
		if (CheckInventory("Wolverine-WhatWeapon") == weapon)
			return "\cD";
		return "\cQ";
	}
	return "";
}

//EJECT MECH
script 697 (void) {
	int MechType = 1;
	if (CheckInventory ("OrcaWeapons")) MechType = 0;
	if (CheckInventory ("RavenWeapons")) MechType = 1;
	if (CheckInventory ("WolverineWeapons")) MechType = 2;
	if (CheckInventory ("MadCatWeapons")) MechType = 3;
	if (CheckInventory ("TitanWeapons")) MechType = 4;
	if (CheckInventory ("JuggernautWeapons")) MechType = 5;
	if (CheckInventory ("TortoiseWeapons")) MechType = 6;
	
	if (CountPassengers (ActivatorTID ()) > 0) {
		GenericError ("You cannot eject while you\nhave passengers on-board!");
		terminate;
	}
	
	int x = GetActorX (0);
	int y = GetActorY (0);
	int z = GetActorZ (0);
	int angle = GetActorAngle (ActivatorTID ());
	
	switch (MechType) {
	case 0:
		// Orca
		SpawnSpotFacing ("EjectedOrcaSpawner", 3800+PlayerNumber(), 0);
		break;
	
	case 1:
		// Raven
		if(GetActorProperty(0,APROP_Health) >= 1000)
			Spawn ("EjectedRaven", x, y, z, 0, angle);
		else
			Spawn ("DamagedRaven", x, y, z, 0, angle);
		break;
	
	case 2:
		// Wolverine
		if(GetActorProperty(0,APROP_Health) >= 1500)
			Spawn ("EjectedWolverine", x, y, z, 0, angle);
		else
			Spawn ("DamagedWolverine", x, y, z, 0, angle);
		break;
	
	case 3:
		// Mad Cat
		if(GetActorProperty(0,APROP_Health) >= 2000)
			Spawn ("EjectedMadCat", x, y, z, 0, angle);
		else
			Spawn ("DamagedMadCat", x, y, z, 0, angle);
		break;
	
	case 4:
		// Titan
		if (GetActorProperty(0,APROP_Health) >= 2500)
			Spawn ("EjectedTitan", x, y, z, 0, angle);
		else
			Spawn ("DamagedTitan", x, y, z, 0, angle);
		break;
	
	case 5:
		// Juggernaut
		SpawnSpotFacing ("EjectedJuggernaut", 3800+PlayerNumber(), 0);
		break;
	
	case 6:
		// Tortoise
		SpawnSpotFacing ("EjectedTortoise", 3800 + PlayerNumber(), 0);
		break;
	}
	
	// [Dusk] {9/15/12} Inform teammates
	TeamMessage (TMSG_MECHEJECT, MechType, 0);
	
	UnMorphActor (0, 0);
	
	if (MechType == 0) {
		ThrustThing (GetActorAngle(0) >> 8, 16, 0, 0); // EJECTO SEAT 3800 ACTIVATED
		ThrustThingZ (0, 80, 0, 1);
	}
	
	delay (5);
	
	SetActorProperty (0, APROP_Invulnerable, false);
	SetPlayerProperty (0, 0, 3);
	CheckAndRemove ("MechEjectButton");
	ACS_ExecuteAlways (10, 0);
	TakeInventory ("IsMech", 1);
	PopArmor ();
	
	delay (1);
	
	TakeInventory ("IsInSpawnRoom", 1);
	SetPlayerProperty (0, false, PROP_FROZEN);
	SetActorProperty (0, APROP_SPEED, PlayerSpeeds[PlayerNumber()]);
}

// Get in Mech animation
script 699 (void) {
	delay (1);
	SetActorState (0, "Spawn2");
	
	// [Dusk] If the player is still in a menu, get him out of it
	SetInventory ("InMenu", 0);
}

// Activates weapon reload.
script 319 (int Weapon, int ReloadTime) {
	str item, sound;
	
	// [Dusk] {9/10/12} Use vars for item and sound instead of
	// copy/pasting the block for each reload type
	switch (Weapon) {
	case 1:
		item = "Reload-LRM";
		sound = "lrm/reload";
		break;
	case 2:
		item = "Reload-ShockCannon";
		sound = "ppc/reload";
		break;
	case 3:
		item = "Reload-80mm";
		sound = "artillery/reload";
		break;
	case 4:
		item = "Reload-Plasma";
		sound = "ppc/reload";
		break;
	case 5:
		item = "Reload-Artillery";
		sound = "lrm/reload";
		break;
	case 6:
		item = "Reload-Nuke";
		sound = "artillery/reload";
		break;
	}
	
	GiveInventory (item, 1);
	delay (35*ReloadTime-1);
	ActivatorSound (sound, 127);
	ActivatorSound (sound, 127);
	delay (20);
	TakeInventory (item, 1);
}

script 332 (void) CLIENTSIDE {
	while (CheckInventory("IsMech")) {
		if (GetHealth () <= GetSpawnHealth() / 5) {
			SetFont ("BIGFONT");
			HudMessage(s:"\cR== HEALTH LEVEL CRITICAL ==";
				HUDMSG_PLAIN, 0, CR_Green, 0.5, 0.59, 0.75);
			HudMessage(s:"\cFPREPARE TO EJECT";
				HUDMSG_PLAIN, 0, CR_Green, 0.5, 0.63, 0.75);
		}
		delay (35*5);
	}
}

// check if you can enter an ejected mech
script 353 (void) {
	int r = 1;
	if(CheckInventory ("CantMech"))
		r = 0;
	else if (CheckInventory ("IsMech")) //[SP] disallow other mech pickups
		r = 0;
	
	SetResultValue (r);
	
	// [Dusk] Push the armor to stack now.
	if (r)
		PushArmor ();
}

// [Dusk] thrusts the player with the specified angle if they are in a mech
// Meant to be used in maps to block areas off from mechs
script SC_MechThrust (int angle) {
	if (CheckInventory ("IsMech")) {
		DisplayCross();
		SETFONT("BigFont");
		HudMessage (s:"You can't go there in a mech!";
			HUDMSG_FADEOUT, 240+PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0);
		ThrustThing (angle, 40, 1, 0);
	}
}

script 359 (void) {
	delay (5);
	SetHealth (GetSpawnHealth() / 2);
}

// Tiger's hanger stuff
script 84 (void) {
	// [Dusk] Is this really necessary?
	/* DisplayCross ();
	SetFont ("BIGFONT");
	HudMessage(s:"You can't go into the Hanger!";
		HUDMSG_FADEOUT, 240+PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0); */
}

script 86 (int x) {
	if (LineSide ())
		terminate;
	
	DisplayCross ();
	SetFont ("BIGFONT");
	HudMessage (s:"You can't enter here!";
		HUDMSG_FADEOUT, 240+PlayerNumber(), CR_DarkRed, 0.5, 0.45, 2.0, 1.0);
	
	if (!CheckInventory("IsMech"))
		ThrustThing (GetActorAngle(6000 + x) >> 8, 35, 1, 0);
	else
		ThrustThing (GetActorAngle(6000 + x) >> 8, 20, 0, 0);
}

// Duplicates..
script 85 (void) {ACS_ExecuteAlways (84, 0);}
script 88 (void) {ACS_ExecuteAlways (86, 0, 1);}
script 89 (void) {} // Dummy - present because maps actually call this. even though it was empty